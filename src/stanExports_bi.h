// Generated by rstantools.  Do not edit by hand.

/*
    TriDimRegression is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    TriDimRegression is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with TriDimRegression.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_bi_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_bi");
    reader.add_event(3, 3, "include", "/functions/transformations_2d.stan");
    reader.add_event(3, 0, "start", "/functions/transformations_2d.stan");
    reader.add_event(50, 47, "end", "/functions/transformations_2d.stan");
    reader.add_event(50, 4, "restart", "model_bi");
    reader.add_event(52, 6, "include", "/data/common_data.stan");
    reader.add_event(52, 0, "start", "/data/common_data.stan");
    reader.add_event(59, 7, "end", "/data/common_data.stan");
    reader.add_event(59, 7, "restart", "model_bi");
    reader.add_event(67, 15, "include", "/transformed_data/add_dimension.stan");
    reader.add_event(67, 0, "start", "/transformed_data/add_dimension.stan");
    reader.add_event(76, 9, "end", "/transformed_data/add_dimension.stan");
    reader.add_event(76, 16, "restart", "model_bi");
    reader.add_event(121, 59, "end", "model_bi");
    return reader;
}
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
rotation_matrix(const T0__& theta, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 7;
        validate_non_negative_index("m", "3", 3);
        validate_non_negative_index("m", "3", 3);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> m(3, 3);
        stan::math::initialize(m, DUMMY_VAR__);
        stan::math::fill(m, DUMMY_VAR__);
        stan::math::assign(m,stan::math::to_matrix(stan::math::array_builder<Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> >().add(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(stan::math::cos(theta)).add(stan::math::sin(theta)).add(0).array())).add(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(-(stan::math::sin(theta))).add(stan::math::cos(theta)).add(0).array())).add(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(0).add(0).add(1).array())).array()));
        current_statement_begin__ = 12;
        return stan::math::promote_scalar<fun_return_scalar_t__>(m);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct rotation_matrix_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const T0__& theta, std::ostream* pstream__) const {
        return rotation_matrix(theta, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
translation_matrix(const T0__& dx,
                       const T1__& dy, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 16;
        validate_non_negative_index("m", "3", 3);
        validate_non_negative_index("m", "3", 3);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> m(3, 3);
        stan::math::initialize(m, DUMMY_VAR__);
        stan::math::fill(m, DUMMY_VAR__);
        stan::math::assign(m,stan::math::to_matrix(stan::math::array_builder<Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> >().add(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(1).add(0).add(0).array())).add(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(0).add(1).add(0).array())).add(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(dx).add(dy).add(1).array())).array()));
        current_statement_begin__ = 21;
        return stan::math::promote_scalar<fun_return_scalar_t__>(m);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct translation_matrix_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const T0__& dx,
                       const T1__& dy, std::ostream* pstream__) const {
        return translation_matrix(dx, dy, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
scale_matrix(const T0__& sx,
                 const T1__& sy, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 25;
        validate_non_negative_index("m", "3", 3);
        validate_non_negative_index("m", "3", 3);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> m(3, 3);
        stan::math::initialize(m, DUMMY_VAR__);
        stan::math::fill(m, DUMMY_VAR__);
        stan::math::assign(m,stan::math::to_matrix(stan::math::array_builder<Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> >().add(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(sx).add(0).add(0).array())).add(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(0).add(sy).add(0).array())).add(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(0).add(0).add(1).array())).array()));
        current_statement_begin__ = 30;
        return stan::math::promote_scalar<fun_return_scalar_t__>(m);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct scale_matrix_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const T0__& sx,
                 const T1__& sy, std::ostream* pstream__) const {
        return scale_matrix(sx, sy, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
shear_matrix(const T0__& shx,
                 const T1__& shy, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 34;
        validate_non_negative_index("m", "3", 3);
        validate_non_negative_index("m", "3", 3);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> m(3, 3);
        stan::math::initialize(m, DUMMY_VAR__);
        stan::math::fill(m, DUMMY_VAR__);
        stan::math::assign(m,stan::math::to_matrix(stan::math::array_builder<Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> >().add(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(1).add(shy).add(0).array())).add(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(shx).add(1).add(0).array())).add(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(0).add(0).add(1).array())).array()));
        current_statement_begin__ = 39;
        return stan::math::promote_scalar<fun_return_scalar_t__>(m);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct shear_matrix_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const T0__& shx,
                 const T1__& shy, std::ostream* pstream__) const {
        return shear_matrix(shx, shy, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
tilt_matrix(const T0__& e,
                const T1__& f, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 43;
        validate_non_negative_index("m", "3", 3);
        validate_non_negative_index("m", "3", 3);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> m(3, 3);
        stan::math::initialize(m, DUMMY_VAR__);
        stan::math::fill(m, DUMMY_VAR__);
        stan::math::assign(m,stan::math::to_matrix(stan::math::array_builder<Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> >().add(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(1).add(0).add(e).array())).add(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(0).add(1).add(f).array())).add(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(0).add(0).add(1).array())).array()));
        current_statement_begin__ = 48;
        return stan::math::promote_scalar<fun_return_scalar_t__>(m);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct tilt_matrix_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const T0__& e,
                const T1__& f, std::ostream* pstream__) const {
        return tilt_matrix(e, f, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_bi
  : public stan::model::model_base_crtp<model_bi> {
private:
        int rowsN;
        int varsN;
        matrix_d dv;
        matrix_d iv;
        int transform;
        int euclidean;
        int affine;
        int projective;
        matrix_d iv3;
public:
    model_bi(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_bi(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_bi_namespace::model_bi";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 54;
            context__.validate_dims("data initialization", "rowsN", "int", context__.to_vec());
            rowsN = int(0);
            vals_i__ = context__.vals_i("rowsN");
            pos__ = 0;
            rowsN = vals_i__[pos__++];
            check_greater_or_equal(function__, "rowsN", rowsN, 1);
            current_statement_begin__ = 55;
            context__.validate_dims("data initialization", "varsN", "int", context__.to_vec());
            varsN = int(0);
            vals_i__ = context__.vals_i("varsN");
            pos__ = 0;
            varsN = vals_i__[pos__++];
            check_greater_or_equal(function__, "varsN", varsN, 1);
            current_statement_begin__ = 56;
            validate_non_negative_index("dv", "rowsN", rowsN);
            validate_non_negative_index("dv", "varsN", varsN);
            context__.validate_dims("data initialization", "dv", "matrix_d", context__.to_vec(rowsN,varsN));
            dv = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(rowsN, varsN);
            vals_r__ = context__.vals_r("dv");
            pos__ = 0;
            size_t dv_j_2_max__ = varsN;
            size_t dv_j_1_max__ = rowsN;
            for (size_t j_2__ = 0; j_2__ < dv_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < dv_j_1_max__; ++j_1__) {
                    dv(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 57;
            validate_non_negative_index("iv", "rowsN", rowsN);
            validate_non_negative_index("iv", "varsN", varsN);
            context__.validate_dims("data initialization", "iv", "matrix_d", context__.to_vec(rowsN,varsN));
            iv = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(rowsN, varsN);
            vals_r__ = context__.vals_r("iv");
            pos__ = 0;
            size_t iv_j_2_max__ = varsN;
            size_t iv_j_1_max__ = rowsN;
            for (size_t j_2__ = 0; j_2__ < iv_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < iv_j_1_max__; ++j_1__) {
                    iv(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 58;
            context__.validate_dims("data initialization", "transform", "int", context__.to_vec());
            transform = int(0);
            vals_i__ = context__.vals_i("transform");
            pos__ = 0;
            transform = vals_i__[pos__++];
            check_greater_or_equal(function__, "transform", transform, 1);
            // initialize transformed data variables
            current_statement_begin__ = 63;
            euclidean = int(0);
            stan::math::fill(euclidean, std::numeric_limits<int>::min());
            stan::math::assign(euclidean,1);
            current_statement_begin__ = 64;
            affine = int(0);
            stan::math::fill(affine, std::numeric_limits<int>::min());
            stan::math::assign(affine,2);
            current_statement_begin__ = 65;
            projective = int(0);
            stan::math::fill(projective, std::numeric_limits<int>::min());
            stan::math::assign(projective,3);
            current_statement_begin__ = 70;
            validate_non_negative_index("iv3", "rowsN", rowsN);
            validate_non_negative_index("iv3", "(varsN + 1)", (varsN + 1));
            iv3 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(rowsN, (varsN + 1));
            stan::math::fill(iv3, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 71;
            for (int iR = 1; iR <= rowsN; ++iR) {
                current_statement_begin__ = 72;
                for (int iV = 1; iV <= varsN; ++iV) {
                    current_statement_begin__ = 73;
                    stan::model::assign(iv3, 
                                stan::model::cons_list(stan::model::index_uni(iR), stan::model::cons_list(stan::model::index_uni(iV), stan::model::nil_index_list())), 
                                get_base1(iv, iR, iV, "iv", 1), 
                                "assigning variable iv3");
                }
                current_statement_begin__ = 75;
                stan::model::assign(iv3, 
                            stan::model::cons_list(stan::model::index_uni(iR), stan::model::cons_list(stan::model::index_uni((varsN + 1)), stan::model::nil_index_list())), 
                            1, 
                            "assigning variable iv3");
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 79;
            validate_non_negative_index("scale", "2", 2);
            num_params_r__ += (1 * 2);
            current_statement_begin__ = 80;
            validate_non_negative_index("shear", "(logical_neq(transform, euclidean) ? 1 : 0 )", (logical_neq(transform, euclidean) ? 1 : 0 ));
            num_params_r__ += (1 * (logical_neq(transform, euclidean) ? 1 : 0 ));
            current_statement_begin__ = 81;
            num_params_r__ += 1;
            current_statement_begin__ = 82;
            validate_non_negative_index("tilt", "(logical_eq(transform, projective) ? 2 : 0 )", (logical_eq(transform, projective) ? 2 : 0 ));
            num_params_r__ += (1 * (logical_eq(transform, projective) ? 2 : 0 ));
            current_statement_begin__ = 83;
            validate_non_negative_index("translation", "2", 2);
            num_params_r__ += (1 * 2);
            current_statement_begin__ = 85;
            validate_non_negative_index("sigma", "2", 2);
            num_params_r__ += (1 * 2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_bi() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 79;
        if (!(context__.contains_r("scale")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable scale missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("scale");
        pos__ = 0U;
        validate_non_negative_index("scale", "2", 2);
        context__.validate_dims("parameter initialization", "scale", "double", context__.to_vec(2));
        std::vector<double> scale(2, double(0));
        size_t scale_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < scale_k_0_max__; ++k_0__) {
            scale[k_0__] = vals_r__[pos__++];
        }
        size_t scale_i_0_max__ = 2;
        for (size_t i_0__ = 0; i_0__ < scale_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, scale[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable scale: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 80;
        if (!(context__.contains_r("shear")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable shear missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("shear");
        pos__ = 0U;
        validate_non_negative_index("shear", "(logical_neq(transform, euclidean) ? 1 : 0 )", (logical_neq(transform, euclidean) ? 1 : 0 ));
        context__.validate_dims("parameter initialization", "shear", "double", context__.to_vec((logical_neq(transform, euclidean) ? 1 : 0 )));
        std::vector<double> shear((logical_neq(transform, euclidean) ? 1 : 0 ), double(0));
        size_t shear_k_0_max__ = (logical_neq(transform, euclidean) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < shear_k_0_max__; ++k_0__) {
            shear[k_0__] = vals_r__[pos__++];
        }
        size_t shear_i_0_max__ = (logical_neq(transform, euclidean) ? 1 : 0 );
        for (size_t i_0__ = 0; i_0__ < shear_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, shear[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable shear: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 81;
        if (!(context__.contains_r("rotation")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rotation missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rotation");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rotation", "double", context__.to_vec());
        double rotation(0);
        rotation = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(rotation);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rotation: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 82;
        if (!(context__.contains_r("tilt")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tilt missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tilt");
        pos__ = 0U;
        validate_non_negative_index("tilt", "(logical_eq(transform, projective) ? 2 : 0 )", (logical_eq(transform, projective) ? 2 : 0 ));
        context__.validate_dims("parameter initialization", "tilt", "double", context__.to_vec((logical_eq(transform, projective) ? 2 : 0 )));
        std::vector<double> tilt((logical_eq(transform, projective) ? 2 : 0 ), double(0));
        size_t tilt_k_0_max__ = (logical_eq(transform, projective) ? 2 : 0 );
        for (size_t k_0__ = 0; k_0__ < tilt_k_0_max__; ++k_0__) {
            tilt[k_0__] = vals_r__[pos__++];
        }
        size_t tilt_i_0_max__ = (logical_eq(transform, projective) ? 2 : 0 );
        for (size_t i_0__ = 0; i_0__ < tilt_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(tilt[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tilt: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 83;
        if (!(context__.contains_r("translation")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable translation missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("translation");
        pos__ = 0U;
        validate_non_negative_index("translation", "2", 2);
        context__.validate_dims("parameter initialization", "translation", "double", context__.to_vec(2));
        std::vector<double> translation(2, double(0));
        size_t translation_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < translation_k_0_max__; ++k_0__) {
            translation[k_0__] = vals_r__[pos__++];
        }
        size_t translation_i_0_max__ = 2;
        for (size_t i_0__ = 0; i_0__ < translation_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(translation[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable translation: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 85;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "2", 2);
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec(2));
        std::vector<double> sigma(2, double(0));
        size_t sigma_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            sigma[k_0__] = vals_r__[pos__++];
        }
        size_t sigma_i_0_max__ = 2;
        for (size_t i_0__ = 0; i_0__ < sigma_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sigma[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 79;
            std::vector<local_scalar_t__> scale;
            size_t scale_d_0_max__ = 2;
            scale.reserve(scale_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < scale_d_0_max__; ++d_0__) {
                if (jacobian__)
                    scale.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    scale.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 80;
            std::vector<local_scalar_t__> shear;
            size_t shear_d_0_max__ = (logical_neq(transform, euclidean) ? 1 : 0 );
            shear.reserve(shear_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < shear_d_0_max__; ++d_0__) {
                if (jacobian__)
                    shear.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    shear.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 81;
            local_scalar_t__ rotation;
            (void) rotation;  // dummy to suppress unused var warning
            if (jacobian__)
                rotation = in__.scalar_constrain(lp__);
            else
                rotation = in__.scalar_constrain();
            current_statement_begin__ = 82;
            std::vector<local_scalar_t__> tilt;
            size_t tilt_d_0_max__ = (logical_eq(transform, projective) ? 2 : 0 );
            tilt.reserve(tilt_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < tilt_d_0_max__; ++d_0__) {
                if (jacobian__)
                    tilt.push_back(in__.scalar_constrain(lp__));
                else
                    tilt.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 83;
            std::vector<local_scalar_t__> translation;
            size_t translation_d_0_max__ = 2;
            translation.reserve(translation_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < translation_d_0_max__; ++d_0__) {
                if (jacobian__)
                    translation.push_back(in__.scalar_constrain(lp__));
                else
                    translation.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 85;
            std::vector<local_scalar_t__> sigma;
            size_t sigma_d_0_max__ = 2;
            sigma.reserve(sigma_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sigma_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sigma.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sigma.push_back(in__.scalar_lb_constrain(0));
            }
            // transformed parameters
            current_statement_begin__ = 88;
            validate_non_negative_index("predicted", "rowsN", rowsN);
            validate_non_negative_index("predicted", "2", 2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> predicted(rowsN, 2);
            stan::math::initialize(predicted, DUMMY_VAR__);
            stan::math::fill(predicted, DUMMY_VAR__);
            // transformed parameters block statements
            {
            current_statement_begin__ = 90;
            validate_non_negative_index("transform_matrix", "3", 3);
            validate_non_negative_index("transform_matrix", "3", 3);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> transform_matrix(3, 3);
            stan::math::initialize(transform_matrix, DUMMY_VAR__);
            stan::math::fill(transform_matrix, DUMMY_VAR__);
            stan::math::assign(transform_matrix,scale_matrix(get_base1(scale, 1, "scale", 1), get_base1(scale, 2, "scale", 1), pstream__));
            current_statement_begin__ = 91;
            if (as_bool(logical_neq(transform, euclidean))) {
                current_statement_begin__ = 91;
                stan::math::assign(transform_matrix, multiply(transform_matrix, shear_matrix(0, get_base1(shear, 1, "shear", 1), pstream__)));
            }
            current_statement_begin__ = 92;
            stan::math::assign(transform_matrix, multiply(transform_matrix, rotation_matrix(rotation, pstream__)));
            current_statement_begin__ = 93;
            if (as_bool(logical_eq(transform, projective))) {
                current_statement_begin__ = 93;
                stan::math::assign(transform_matrix, multiply(transform_matrix, tilt_matrix(get_base1(tilt, 1, "tilt", 1), get_base1(tilt, 2, "tilt", 1), pstream__)));
            }
            current_statement_begin__ = 94;
            stan::math::assign(transform_matrix, multiply(transform_matrix, translation_matrix(get_base1(translation, 1, "translation", 1), get_base1(translation, 2, "translation", 1), pstream__)));
            current_statement_begin__ = 96;
            stan::math::assign(predicted, block(multiply(iv3, transform_matrix), 1, 1, rowsN, 2));
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 88;
            size_t predicted_j_1_max__ = rowsN;
            size_t predicted_j_2_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < predicted_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < predicted_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(predicted(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: predicted" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable predicted: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            current_statement_begin__ = 100;
            lp_accum__.add(lognormal_log<propto__>(scale, 1, 1));
            current_statement_begin__ = 101;
            if (as_bool(logical_neq(transform, euclidean))) {
                current_statement_begin__ = 101;
                lp_accum__.add(lognormal_log<propto__>(shear, 1, 1));
            }
            current_statement_begin__ = 102;
            lp_accum__.add(normal_log<propto__>(rotation, 0, 10));
            current_statement_begin__ = 103;
            if (as_bool(logical_eq(transform, projective))) {
                current_statement_begin__ = 103;
                lp_accum__.add(normal_log<propto__>(tilt, 0, 10));
            }
            current_statement_begin__ = 104;
            lp_accum__.add(normal_log<propto__>(translation, 0, 10));
            current_statement_begin__ = 106;
            lp_accum__.add(cauchy_log<propto__>(sigma, 0, 1));
            current_statement_begin__ = 108;
            for (int iR = 1; iR <= rowsN; ++iR) {
                current_statement_begin__ = 109;
                lp_accum__.add(normal_log<propto__>(get_base1(dv, iR, 1, "dv", 1), get_base1(predicted, iR, 1, "predicted", 1), get_base1(sigma, 1, "sigma", 1)));
                current_statement_begin__ = 110;
                lp_accum__.add(normal_log<propto__>(get_base1(dv, iR, 2, "dv", 1), get_base1(predicted, iR, 2, "predicted", 1), get_base1(sigma, 2, "sigma", 1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("scale");
        names__.push_back("shear");
        names__.push_back("rotation");
        names__.push_back("tilt");
        names__.push_back("translation");
        names__.push_back("sigma");
        names__.push_back("predicted");
        names__.push_back("log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_neq(transform, euclidean) ? 1 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((logical_eq(transform, projective) ? 2 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(rowsN);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((2 * rowsN));
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_bi_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> scale;
        size_t scale_d_0_max__ = 2;
        scale.reserve(scale_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < scale_d_0_max__; ++d_0__) {
            scale.push_back(in__.scalar_lb_constrain(0));
        }
        size_t scale_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < scale_k_0_max__; ++k_0__) {
            vars__.push_back(scale[k_0__]);
        }
        std::vector<double> shear;
        size_t shear_d_0_max__ = (logical_neq(transform, euclidean) ? 1 : 0 );
        shear.reserve(shear_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < shear_d_0_max__; ++d_0__) {
            shear.push_back(in__.scalar_lb_constrain(0));
        }
        size_t shear_k_0_max__ = (logical_neq(transform, euclidean) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < shear_k_0_max__; ++k_0__) {
            vars__.push_back(shear[k_0__]);
        }
        double rotation = in__.scalar_constrain();
        vars__.push_back(rotation);
        std::vector<double> tilt;
        size_t tilt_d_0_max__ = (logical_eq(transform, projective) ? 2 : 0 );
        tilt.reserve(tilt_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < tilt_d_0_max__; ++d_0__) {
            tilt.push_back(in__.scalar_constrain());
        }
        size_t tilt_k_0_max__ = (logical_eq(transform, projective) ? 2 : 0 );
        for (size_t k_0__ = 0; k_0__ < tilt_k_0_max__; ++k_0__) {
            vars__.push_back(tilt[k_0__]);
        }
        std::vector<double> translation;
        size_t translation_d_0_max__ = 2;
        translation.reserve(translation_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < translation_d_0_max__; ++d_0__) {
            translation.push_back(in__.scalar_constrain());
        }
        size_t translation_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < translation_k_0_max__; ++k_0__) {
            vars__.push_back(translation[k_0__]);
        }
        std::vector<double> sigma;
        size_t sigma_d_0_max__ = 2;
        sigma.reserve(sigma_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sigma_d_0_max__; ++d_0__) {
            sigma.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sigma_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 88;
            validate_non_negative_index("predicted", "rowsN", rowsN);
            validate_non_negative_index("predicted", "2", 2);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> predicted(rowsN, 2);
            stan::math::initialize(predicted, DUMMY_VAR__);
            stan::math::fill(predicted, DUMMY_VAR__);
            // do transformed parameters statements
            {
            current_statement_begin__ = 90;
            validate_non_negative_index("transform_matrix", "3", 3);
            validate_non_negative_index("transform_matrix", "3", 3);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> transform_matrix(3, 3);
            stan::math::initialize(transform_matrix, DUMMY_VAR__);
            stan::math::fill(transform_matrix, DUMMY_VAR__);
            stan::math::assign(transform_matrix,scale_matrix(get_base1(scale, 1, "scale", 1), get_base1(scale, 2, "scale", 1), pstream__));
            current_statement_begin__ = 91;
            if (as_bool(logical_neq(transform, euclidean))) {
                current_statement_begin__ = 91;
                stan::math::assign(transform_matrix, multiply(transform_matrix, shear_matrix(0, get_base1(shear, 1, "shear", 1), pstream__)));
            }
            current_statement_begin__ = 92;
            stan::math::assign(transform_matrix, multiply(transform_matrix, rotation_matrix(rotation, pstream__)));
            current_statement_begin__ = 93;
            if (as_bool(logical_eq(transform, projective))) {
                current_statement_begin__ = 93;
                stan::math::assign(transform_matrix, multiply(transform_matrix, tilt_matrix(get_base1(tilt, 1, "tilt", 1), get_base1(tilt, 2, "tilt", 1), pstream__)));
            }
            current_statement_begin__ = 94;
            stan::math::assign(transform_matrix, multiply(transform_matrix, translation_matrix(get_base1(translation, 1, "translation", 1), get_base1(translation, 2, "translation", 1), pstream__)));
            current_statement_begin__ = 96;
            stan::math::assign(predicted, block(multiply(iv3, transform_matrix), 1, 1, rowsN, 2));
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t predicted_j_2_max__ = 2;
                size_t predicted_j_1_max__ = rowsN;
                for (size_t j_2__ = 0; j_2__ < predicted_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < predicted_j_1_max__; ++j_1__) {
                        vars__.push_back(predicted(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 114;
            validate_non_negative_index("log_lik", "(2 * rowsN)", (2 * rowsN));
            std::vector<double> log_lik((2 * rowsN), double(0));
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 115;
            for (int iR = 1; iR <= rowsN; ++iR) {
                current_statement_begin__ = 116;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(iR), stan::model::nil_index_list()), 
                            normal_log(get_base1(dv, iR, 1, "dv", 1), get_base1(predicted, iR, 1, "predicted", 1), get_base1(sigma, 1, "sigma", 1)), 
                            "assigning variable log_lik");
                current_statement_begin__ = 117;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni((iR + rowsN)), stan::model::nil_index_list()), 
                            normal_log(get_base1(dv, iR, 2, "dv", 1), get_base1(predicted, iR, 2, "predicted", 1), get_base1(sigma, 2, "sigma", 1)), 
                            "assigning variable log_lik");
            }
            // validate, write generated quantities
            current_statement_begin__ = 114;
            size_t log_lik_k_0_max__ = (2 * rowsN);
            for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
                vars__.push_back(log_lik[k_0__]);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_bi";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t scale_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < scale_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "scale" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t shear_k_0_max__ = (logical_neq(transform, euclidean) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < shear_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "shear" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rotation";
        param_names__.push_back(param_name_stream__.str());
        size_t tilt_k_0_max__ = (logical_eq(transform, projective) ? 2 : 0 );
        for (size_t k_0__ = 0; k_0__ < tilt_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tilt" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t translation_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < translation_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "translation" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t predicted_j_2_max__ = 2;
            size_t predicted_j_1_max__ = rowsN;
            for (size_t j_2__ = 0; j_2__ < predicted_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < predicted_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "predicted" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_k_0_max__ = (2 * rowsN);
        for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t scale_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < scale_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "scale" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t shear_k_0_max__ = (logical_neq(transform, euclidean) ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < shear_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "shear" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rotation";
        param_names__.push_back(param_name_stream__.str());
        size_t tilt_k_0_max__ = (logical_eq(transform, projective) ? 2 : 0 );
        for (size_t k_0__ = 0; k_0__ < tilt_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tilt" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t translation_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < translation_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "translation" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sigma_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < sigma_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t predicted_j_2_max__ = 2;
            size_t predicted_j_1_max__ = rowsN;
            for (size_t j_2__ = 0; j_2__ < predicted_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < predicted_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "predicted" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t log_lik_k_0_max__ = (2 * rowsN);
        for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_bi_namespace::model_bi stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
