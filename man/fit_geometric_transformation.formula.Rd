% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_geometric_transformation.R
\name{fit_geometric_transformation.formula}
\alias{fit_geometric_transformation.formula}
\title{Fitting Bidimensional or Tridimensional Regression / Geometric Transformation Models}
\usage{
fit_geometric_transformation(formula, data, transformation)
fit_geometric_transformation(iv, dv, transformation, iv_prefix="iv_", dv_prefix="dv_")
}
\arguments{
\item{formula}{a symbolic description of the model to be fitted in the format \code{Xdep + Ydep ~ Xind + Yind}, where
\code{Xdep} and \code{Ydep} are dependent and \code{Xind} and \code{Yind} are independent variables}

\item{data}{a data frame containing variables for the model.}

\item{transformation}{the transformation to be used, either \code{'euclidean'}, \code{'affine'}, or \code{'projective'}.
#' @param chains Number of chains for sampling.}

\item{cores}{Number of CPU cores to use for sampling. If omitted, All cores are used.}

\item{...}{Additional arguments passed to \link[rstan:stanmodel-method-sampling]{rstan::sampling()} function.}
}
\value{
returns an object of class "tridim_transform".
An object of class "tridim_transform" is a list containing at least the following components:
\item{\code{transformation}}{string with the transformation type}
\item{\code{Ndim}}{number of dimensions (2 or 3).}
\item{\code{stanfit}}{\code{\link{rstan::stanfit}} object.}
\item{\code{formula}}{formula, describing input and output columns}
\item{\code{data}}{data in Stan list, used to fit the model}
\item{\code{Call}}{function call information, incorporates the \code{formula}, \code{transformation}, and \code{data}.}
}
\description{
Fitting Bidimensional or Tridimensional Regression / Geometric Transformation Models
}
\examples{
\dontrun{
# Geometric transformations of 2D data
euc2 <- fit_geometric_transformation(depV1 + depV2 ~ indepV1 + indepV2, NakayaData, 'euclidean')
aff2 <- fit_geometric_transformation(depV1 + depV2 ~ indepV1 + indepV2, NakayaData, 'affine')
prj2 <- fit_geometric_transformation(depV1 + depV2 ~ indepV1 + indepV2, NakayaData, 'projective')

# summary of transformation coefficients
coef(euc2)

# statistical comparison via WAIC criterion
loo::loo_compare(waic(euc2), waic(aff2), waic(prj2))
}
}
