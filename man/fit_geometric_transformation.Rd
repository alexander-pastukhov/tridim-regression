% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_geometric_transformation.R
\name{fit_geometric_transformation}
\alias{fit_geometric_transformation}
\alias{fit_geometric_transformation.formula}
\title{Fitting Bidimensional or Tridimensional Regression / Geometric Transformation Models via Formula.}
\usage{
\method{fit_geometric_transformation}{formula}(
  formula,
  data,
  transformation,
  priors = NULL,
  chains = 4,
  cores = NULL,
  ...
)
}
\arguments{
\item{formula}{a symbolic description of the model to be fitted in the format \code{Xdep + Ydep ~ Xind + Yind}, where
\code{Xdep} and \code{Ydep} are dependent and \code{Xind} and \code{Yind} are independent variables}

\item{data}{a data frame containing variables for the model.}

\item{transformation}{the transformation to be used, either \code{'euclidean'}, \code{'affine'}, or \code{'projective'}.}

\item{priors}{named list of parameters prior distribution. Except for \code{sigma} that uses exponential prior,
all other parameters use normal or transformed normal prior and require parameter pairs. E.g.,
\code{list("translation" = c(0, 10), "sigma"=1)}.}

\item{chains}{Number of chains for sampling.}

\item{cores}{Number of CPU cores to use for sampling. If omitted, all available cores are used.}

\item{...}{Additional arguments passed to \code{\link[rstan:sampling]{sampling}} function.}
}
\description{
Fits Bidimensional or Tridimensional regression / geometric transformation models using
Stan engine. The \code{formula} described dependent and independent numeric variables in the
\code{data}.

For the 2D data, you can fit \code{"euclidean"} (scale, rotation, and translation),
\code{"affine"} (+shear), or \code{"projective"} (+tilt) transformations. For 3D data, you can fit
\code{"euclidean_x"}, \code{"euclidean_y"}, \code{"euclidean_z"} (scale, rotation around the
specified axis, and translation), \code{"euclidean"} (scale, rotation around all three axes, and translation),
\code{"affine"} (\code{"euclidean"} + shear for x-plane), and \code{"projective"} (+shear for y and z planes)
transformations.
}
\examples{
\dontrun{
# Geometric transformations of 2D data
euc2 <- fit_geometric_transformation(depV1 + depV2 ~ indepV1 + indepV2,
                                     NakayaData, 'euclidean')
aff2 <- fit_geometric_transformation(depV1 + depV2 ~ indepV1 + indepV2,
                                     NakayaData, 'affine')
prj2 <- fit_geometric_transformation(depV1 + depV2 ~ indepV1 + indepV2,
                                     NakayaData, 'projective')

# summary of transformation coefficients
coef(euc2)

# statistical comparison via WAIC criterion
loo::loo_compare(waic(euc2), waic(aff2), waic(prj2))
}
}
\seealso{
\code{\link{fit_geometric_transformation_df}}
}
